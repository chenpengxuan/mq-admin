group "com.ymatou"
version "1.0"

buildscript {
    repositories {
        // NOTE: You should declare only repositories that you need here
        mavenLocal()
        mavenCentral()
        maven { url "http://172.16.100.98/nexus/content/groups/public/"}
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE")
        classpath "org.springframework:springloaded:1.2.3.RELEASE"
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "spring-boot"
apply plugin: "maven"
apply plugin: "eclipse-wtp"

jar {
    baseName = "mq-admin"
    exclude('biz.properties')
    exclude('mongodb.properties')
    exclude('logback-test.xml')
}

ext {
    springBootVersion = "1.4.3.RELEASE"
    fastJsonVersion = "1.2.6"

    httpclientVersion = "4.5.2"
    httpcoreVersion = "4.4.4"

    jacksonVersion = "2.8.6"
    apacheCommonVersion = "3.4"
    snakeyamlVersion = "1.9"
    shiroVersion = "1.2.3"
    guavaVersion = "19.0"
    junitVersion = "4.12"
    quartzVersion = "2.2.3"
    javaxMailVersion = "1.4.7"

    springDataMongoVersion = "1.9.2.RELEASE"
    springDataCommonsVersion = "1.12.6.RELEASE"
    mongoDriverVersion = "3.2.2"
    mongoMorphiaVersion = "1.2.1"
    querydslVersion = "4.1.4"

    //ymatou
    disconfVersion = "2.6.41"
    errorreporterVersion = "1.0.9"
}

idea {
    module {
        sourceDirs += file("$buildDir/generated-sources/")
    }
}


configurations {
    compile.exclude group: "org.eclipse.jetty.websocket"
    compile.exclude group: "org.yaml"
    compile.exclude module:"c3p0"

    queryDslTool
}

repositories {

    mavenLocal()
    maven { url "http://172.16.100.98/nexus/content/groups/public/"}
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    mavenCentral()

}

dependencies {

    queryDslTool "com.querydsl:querydsl-apt:${querydslVersion}"

    compile "com.google.guava:guava:${guavaVersion}"
    compile "org.apache.httpcomponents:httpclient:${httpclientVersion}"
    compile "org.apache.httpcomponents:httpcore:${httpcoreVersion}"

    compile "org.apache.shiro:shiro-core:${shiroVersion}"
    compile "org.apache.shiro:shiro-spring:${shiroVersion}"
    compile "org.apache.shiro:shiro-web:${shiroVersion}"

    compile "com.alibaba:fastjson:${fastJsonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "org.apache.commons:commons-lang3:${apacheCommonVersion}"

	compile "org.yaml:snakeyaml:${snakeyamlVersion}"


    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	compile "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
	compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
    compile "org.springframework:spring-context-support"
    compile "org.springframework.data:spring-data-mongodb:${springDataMongoVersion}"

    compile "org.mongodb:mongo-java-driver:${mongoDriverVersion}"
    compile "org.mongodb.morphia:morphia:${mongoMorphiaVersion}"
    compile "org.mongodb.morphia:morphia-logging-slf4j:${mongoMorphiaVersion}"
    compile "com.querydsl:querydsl-mongodb:${querydslVersion}"


    compile "com.ymatou.disconf:disconf-client:${disconfVersion}"
    compile "com.ymatou.errorreporter:errorreporter-logback:${errorreporterVersion}"

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile group: "junit", name: "junit", version: "${junitVersion}"
}

task generateMongoQueryDSL(type: JavaCompile, group: 'build', description: 'Generates mongo the QueryDSL query types') {
    source = sourceSets.main.java
    def queryDslDir = new File(buildDir, 'generated-sources')
    sourceSets.main.java.srcDirs += queryDslDir

    classpath = configurations.compile + configurations.queryDslTool
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.morphia.MorphiaAnnotationProcessor"
    ]
    destinationDir = new File(buildDir, 'generated-sources')
}


compileJava.dependsOn generateMongoQueryDSL

tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configure(options) {
        fork = true
        incremental = true
        encoding = 'UTF-8'
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = "2.4"
}

//复制启动，停止脚本
task copyScript(type: Copy) {
    into "$buildDir/dist"
    from "$projectDir/script"
}

//复制jar
task copyJars(type: Copy,dependsOn:jar) {
    from configurations.runtime  //项目所有的jar依赖
    from "$buildDir/libs"        //本项目jar
    into "$buildDir/dist/lib"
}

//复制配置
task copyConfig(type: Copy){
    from "$projectDir/src/main/resources/application.properties"
    into "$buildDir/dist/conf"
}

//打包发布 发布为：gradle release 默认位置为：build/distributions
task release(type: Zip,dependsOn:[copyScript,copyJars,copyConfig]) {
    archiveName="mq-admin.zip"
    from "$buildDir/dist"
}
